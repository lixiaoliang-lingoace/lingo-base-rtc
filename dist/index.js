import e from"events";const i={isDev:!1,localUid:"0",screenSharingUid:"1",screenSharingSize:{width:1280,height:720},captureSize:{width:320,height:240}};class t{}class r extends t{constructor(...e){super(...e),this.uid=""}}var c,o;!function(e){e.NotSupported="NotSupported",e.PermissionDenied="PermissionDenied",e.DeviceNotFound="DeviceNotFound",e.NotReadable="NotReadable",e.Other="Other"}(c||(c={}));class a extends Error{constructor(e,i){super(),this.name=a.name,this.code=e,this.message=i||""}static createRTCError(e){const i=e.name,t=e.message;return"NotAllowedError"===i?new a(c.PermissionDenied,t):"NotFoundError"===i?new a(c.DeviceNotFound,t):["NotReadableError","OverconstrainedError"].includes(i)?new a(c.NotReadable,t):new a(c.Other,t)}static createOtherError(e){return new a(c.Other,e)}}class s{constructor(){this.lingoVersion="1.0.0",this.client={},this.activeSpeakerId="",this.mirrored=!1}async checkPermissions(e){const i={};async function t(e){const i=e?{video:!0}:{audio:!0};try{return(await navigator.mediaDevices.getUserMedia(i)).getTracks().forEach((e=>{e.stop()})),0}catch(e){if(e&&"NotAllowedError"===e.name){return e.message.endsWith("by system")?1:2}return 0}}if(!e||"audio"===e){const e=await t(!1);0===e?i.audio=!0:(i.audio=!1,i.audioBySystem=1===e)}if(!e||"video"===e){const e=await t(!0);0===e?i.video=!0:(i.video=!1,i.videoBySystem=1===e)}return i}async getDevicesCore(e,i){if(!e){const e=await this.checkPermissions(i);if(!1===e.audio||!1===e.video){const i=e.audioBySystem||e.videoBySystem;throw new a(c.PermissionDenied,"Permission denied"+(i?" by system":""))}}return(await navigator.mediaDevices.enumerateDevices()).filter((e=>e.deviceId))}async getDevices(e){return this.getDevicesCore(e)}async getCameras(e){return(await this.getDevicesCore(e,"video")).filter((e=>"videoinput"===e.kind))}async getMicrophones(e){return(await this.getDevicesCore(e,"audio")).filter((e=>"audioinput"===e.kind))}async getSpeakerDevices(e){return(await this.getDevicesCore(e,"audio")).filter((e=>"audiooutput"===e.kind))}async setMicrophoneDevice(e){if(this.microphoneAudioTrack){if(this.microphoneAudioTrack.getDeviceId()!==e&&(await this.microphoneAudioTrack.setDevice(e),this.client)){const i={deviceId:e,label:this.microphoneAudioTrack.getTrackLabel(),kind:"audioinput"};this.client.emit("DeviceSwitched",i)}}}async setSpeakerDevice(e){if(this.activeSpeakerId!==e&&this.client){this.client.getRemoteUsers().forEach((i=>{const t=i.audioTrack;t&&t.setSpeakerDevice(e)})),this.activeSpeakerId=e;const i=await this.getActiveSpeaker();this.client.emit("DeviceSwitched",i)}}async setCameraDevice(e){let i=!1;const t=[this.cameraVideoTrack,this.previewVideoTrack].map((t=>t&&t.getDeviceId()!==e?(i=!0,t.setDevice(e)):Promise.resolve()));if(await Promise.allSettled(t),this.client&&i){const i=this.cameraVideoTrack||this.previewVideoTrack,t={deviceId:e,label:i?i.getTrackLabel():"",kind:"videoinput"};this.client.emit("DeviceSwitched",t)}}getActiveMicrophone(){const e={deviceId:"",label:"",kind:"audioinput"};return this.microphoneAudioTrack&&(e.deviceId=this.microphoneAudioTrack.getDeviceId()||"",e.label=this.microphoneAudioTrack.getTrackLabel()),Promise.resolve(e)}async getActiveSpeaker(){const e=await this.getSpeakerDevices(!0),i={deviceId:"default",label:"",kind:"audiooutput"};if(e.length>0){const t=e.find((e=>e.deviceId===this.activeSpeakerId))||e[0];i.deviceId=t.deviceId,i.label=t.label}return i}getActiveCamera(){const e={deviceId:"",label:"",kind:"videoinput"},i=[this.cameraVideoTrack,this.previewVideoTrack];for(const t of i)if(t){e.deviceId=t.getDeviceId()||"",e.label=t.getTrackLabel();break}return Promise.resolve(e)}release(){[this.microphoneAudioTrack,this.previewVideoTrack,this.cameraVideoTrack,this.customVideoTrack].forEach((e=>{e&&(e.stop(),e.close())})),this.client&&(this.client.leave(),this.client.remoteAudioTrackMap.clear(),this.client.remoteVideoTrackMap.clear())}async detectMicrophone(e){this.microphoneAudioTrack&&!this.microphoneAudioTrack.closed||await this.createMicrophoneAudioTrack(e);const i=()=>this.microphoneAudioTrack?this.microphoneAudioTrack.getVolume():0;return{checkIsActive:function(){const e=[];function t(r){setTimeout((()=>{const c=i();e.push(c),e.length<10?t(r):r(e.some((e=>e>0)))}),200)}return new Promise((e=>{t(e)}))},getVolumeLevel:i,cleanup:()=>{}}}mirrorVideo(e){this.mirrored=e,[(this.previewVideoTrack,this.cameraVideoTrack,this.customVideoTrack)].forEach((i=>{i&&i.mirrorVideo(e)}))}async checkAndSetDevice(){try{const e=await this.getDevices(!0),i=[{kind:"audioinput",getDevice:this.getActiveMicrophone,setDevice:this.setMicrophoneDevice},{kind:"videoinput",getDevice:this.getActiveCamera,setDevice:this.setCameraDevice}].map((i=>new Promise((async function(t){const r=e.filter((e=>e.kind===i.kind)),c=await i.getDevice();if(r.length>0&&!r.some((e=>e.deviceId===c.deviceId)))for(let e=0;e<r.length;e++){const t=r[e];try{await i.setDevice(t.deviceId);break}catch(e){console.error(e)}}t(!0)}))));await Promise.allSettled(i)}catch(e){throw console.error("checkAndResumeDevice error:",e),a.createRTCError(e)}}async resumeLocalTracks(){var e=this;const i=!this.microphoneAudioTrack||this.microphoneAudioTrack.closed,t=!this.cameraVideoTrack||this.cameraVideoTrack.closed,r=async function(i){const t=e.client.localTracks.find((e=>e.trackMediaType===i));return!!t&&(await e.client.unpublish(t),!0)};let c=!1,o=!1;if(i&&(c=await r("audio")),t&&(o=await r("video")),i)try{const e=await this.createMicrophoneAudioTrack();c&&await this.client.publish(e)}catch(e){}if(t)try{const e=await this.createCameraVideoTrack({});o&&await this.client.publish(e)}catch(e){throw console.error("resumeLocalTracks error:",e),a.createRTCError(e)}}}!function(e){e.DISCONNECTED="DISCONNECTED",e.CONNECTING="CONNECTING",e.CONNECTED="CONNECTED",e.RECONNECTING="RECONNECTING",e.DISCONNECTING="DISCONNECTING"}(o||(o={}));class n{constructor(){this.eventEmitter=new e,this.uid="",this.connectionState=o.DISCONNECTED,this.localTracks=[],this.remoteAudioTrackMap=new Map,this.remoteVideoTrackMap=new Map}isScreenSharing(e){return e.toString()===i.screenSharingUid}deleteRemoteTrack(e,i){const t=e,r="audio"===i?this.remoteAudioTrackMap:this.remoteVideoTrackMap,c=r.get(t);c&&(c.stop(),r.delete(t))}on(e,i){this.eventEmitter.on(e,i)}once(e,i){this.eventEmitter.once(e,i)}off(e,i){this.eventEmitter.removeListener(e,i)}emit(e,...i){this.eventEmitter.emit(e,...i)}}class d{}export{s as LingoBaseRTC,n as LingoBaseRTCClient,r as LingoBaseRemoteTrack,d as LingoBaseStore,t as LingoBaseTrack,a as LingoRTCError,c as LingoRTCErrorCode,o as RTCConnectionState,i as config};
